library ieee;
use ieee.std_logic_1164.all;
entity Full_Adder is
   port( X, Y, Cin : in std_logic;
         sum, Cout : out std_logic);
end Full_Adder;
 
architecture bhv of Full_Adder is
begin
   sum <= (X xor Y) xor Cin;
   Cout <= (X and (Y or Cin)) or (Cin and Y);
end bhv;


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity chaimaoumayma is
    Port ( A0 : in STD_LOGIC;
           A1 : in STD_LOGIC;
           A2 : in STD_LOGIC;
           A3 : in STD_LOGIC;
           B0 : in STD_LOGIC;
           B1 : in STD_LOGIC;
           B2 : in STD_LOGIC;
           B3 : in STD_LOGIC;
           Cin: in STD_LOGIC;
           C : out STD_LOGIC;
           S0 : out STD_LOGIC;
           S1 : out STD_LOGIC;
           S2 : out STD_LOGIC;
           S3 : out STD_LOGIC
           );
end chaimaoumayma;

architecture Behavioral of chaimaoumayma is
component Full_Adder is
  port( X, Y, Cin : in std_logic;
        sum, Cout : out std_logic);
end component;
signal C1, C2, C3, C4: std_logic;
signal TMP: std_logic_vector(3 downto 0);
 
begin

FA0:Full_Adder port map(A0,B0,Cin, S0,C1);
FA1:Full_Adder port map(A1,B1,C1, S1,C2);
FA2:Full_Adder port map(A2,B2,C2, S2,C3);
FA3:Full_Adder port map(A3,B3,C3, S3,C4);
C <= C4;
end Behavioral;


library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity mux_4to1 is
 port(
   
     A,B: in STD_LOGIC_VECTOR(3 downto 0);
     S0: in STD_LOGIC;
     Z: out STD_LOGIC_VECTOR(3 downto 0)
  );
end mux_4to1;

architecture bhv of mux_4to1 is
begin
process (A,B,S0) is
begin
  if (S0 ='0') then
      Z <= A;
  else
      Z <= B;
  end if;
end process;
end bhv;

 library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity adder is
Generic (N: natural:=8);
port(
A,B: in std_logic_vector(N-1 downto 0);
Cin : in std_logic;
Cout : out std_logic;
S : out std_logic_vector(N-1 downto 0));
end adder;

architecture adderarch of adder is

signal C:std_logic_vector(N-2 downto 0);
component Full_Adder
port( X, Y, Cin : in std_logic;
        sum, Cout : out std_logic);
end component;
BEGIN
U : Full_Adder port map(X=>A(0),Y=>B(0),Cin=>Cin,sum=>S(0),Cout=>Cout);
a5tani :for i in 1 to N-2 generate
    addi : Full_Adder port map (A(i),B(i),C(i-1),S(i),C(i));
 end generate;
 dernier : Full_Adder port map(A(N-1),B(N-1),C(N-2),S(N-1), Cout);
 end adderarch;
 
 
library IEEE;
use IEEE.STD_LOGIC_1164.all;
entity multiplieur  is
port(
    a ,b :  in STD_LOGIC_VECTOR(3 downto 0);
    p :  out STD_LOGIC_VECTOR(7 downto 0)
    ) ;
    end multiplieur ;
 architecture bhv of multiplieur is
 Signal om1,om2,om3,om4 :std_logic_vector(3 downto 0);
 signal co1,co2,co3 :std_logic;
 signal i1,i2,i3,i4,s1,s2:std_logic_vector(7 downto 0);

component adder  
port (
A,B: in std_logic_vector(8-1 downto 0);
Cin : in std_logic;
Cout : out std_logic;
S : out std_logic_vector(8-1 downto 0));
end component;
component adder2
port (
A,B: in std_logic_vector(8-1 downto 0);
Cin : in std_logic;
Cout : out std_logic;
S : out std_logic_vector(8-1 downto 0));
end component;  
component adder3
port (
A,B: in std_logic_vector(8-1 downto 0);
Cin : in std_logic;
Cout : out std_logic;
S : out std_logic_vector(8-1 downto 0));
end component;
component  mux_4to1
 port(
     A,B: in STD_LOGIC_VECTOR(3 downto 0);
     S0: in STD_LOGIC;
     Z: out STD_LOGIC_VECTOR(3 downto 0));
end component;
begin
i1<="0000" & om1;
i2<="000" & om2 & "0";
i3<="00" & om3 & "00";
i4<="0" & om4 & "000";


    MUX1:mux_4to1 port map (a,"0000",b(0),om1);
    MUX2:mux_4to1 port map (a,"0000",b(1),om2);
    MUX3:mux_4to1 port map (a,"0000",b(2),om3);
    MUX4:mux_4to1 port map (a,"0000",b(3),om4);
   
    add1: adder port map ( i1,i2,'0',co1, s1);
    add2: adder2 port map ( i3 ,i4,'0',co2, s2);
    add3: adder3 port map (s1,s2,'0',co3,p);
 end bhv;